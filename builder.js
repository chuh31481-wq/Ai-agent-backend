import fs from 'fs-extra';
import path from 'path';
import Tools from './tools.js';

class ProjectBuilder {
    constructor() {
        this.tools = new Tools();
        this.templates = new Map();
        this.loadTemplates();
    }

    loadTemplates() {
        this.templates.set('react-app', {
            files: [
                {
                    path: 'package.json',
                    content: `{
  "name": "react-app",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "npm run build && node server.js"
  },
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "express": "^4.18.0"
  },
  "devDependencies": {
    "vite": "^4.0.0"
  }
}`
                },
                {
                    path: 'index.html',
                    content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>React App</title>
</head>
<body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
</body>
</html>`
                }
            ]
        });
    }

    async buildProject(projectType, projectPath, options = {}) {
        console.log(`🏗️ Building ${projectType} project...`);

        const template = this.templates.get(projectType) || this.templates.get('react-app');
        
        for (const file of template.files) {
            const fullPath = path.join(projectPath, file.path);
            await this.tools.createFile(fullPath, file.content);
            console.log(`✅ Created: ${file.path}`);
        }

        // Install dependencies
        if (options.installDeps !== false) {
            await this.tools.installDependencies(projectPath);
        }

        return { success: true, path: projectPath };
    }

    async generateFromAI(requirements, projectPath) {
        // This would integrate with the AI to generate custom files
        console.log('🤖 Generating AI-powered project...');
        
        const basicStructure = [
            'package.json',
            'src/main.js',
            'public/index.html',
            'README.md'
        ];

        for (const file of basicStructure) {
            const content = await this.generateFileContent(file, requirements);
            await this.tools.createFile(path.join(projectPath, file), content);
        }

        return { success: true, generated: basicStructure.length };
    }

    async generateFileContent(filename, requirements) {
        // Simple template-based content generation
        const templates = {
            'package.json': `{
  "name": "${requirements.name || 'ai-project'}",
  "version": "1.0.0",
  "description": "${requirements.description || 'Generated by AI'}",
  "main": "src/main.js",
  "scripts": {
    "start": "node src/main.js",
    "dev": "nodemon src/main.js"
  },
  "dependencies": {}
}`,

            'src/main.js': `// Generated by Project God AI
console.log('🚀 Hello from AI-generated project!');
console.log('Project: ${requirements.goal}');

// Your code here
const main = () => {
    console.log('Application started successfully!');
};

main();`,

            'README.md': `# ${requirements.name || 'AI Generated Project'}

## Description
${requirements.description || 'This project was automatically generated by Project God AI.'}

## Features
- AI-generated code
- Production-ready structure
- Easy to customize

## Getting Started
\`\`\`bash
npm install
npm start
\`\`\`
`
        };

        return templates[filename] || `// ${filename}\n// Generated by Project God AI`;
    }
}

export default ProjectBuilder;
